package knowledge;import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;/** *  * @author tengfei.fangtf */public class AtomicIntegerFieldUpdaterTest {    private static AtomicIntegerFieldUpdater<User> oldUpdate=         AtomicIntegerFieldUpdater.newUpdater(User.class, "old");        //必须是public volatile 修饰    private static AtomicReferenceFieldUpdater<User,String> nameUpdate=         AtomicReferenceFieldUpdater.newUpdater(User.class, String.class,"name");    public static void main(String[] args) {        User conan = new User("conan", 10);        oldUpdate.getAndIncrement(conan);        System.out.println(oldUpdate.get(conan));        oldUpdate.getAndIncrement(conan);        System.out.println(oldUpdate.get(conan));        oldUpdate.getAndIncrement(conan);        System.out.println(oldUpdate.get(conan));        oldUpdate.getAndIncrement(conan);        System.out.println(oldUpdate.get(conan));        oldUpdate.getAndIncrement(conan);        System.out.println(oldUpdate.get(conan));                nameUpdate.compareAndSet(conan, conan.getName(), "update");        System.out.println(conan.getName());    }    public static class User {        private String      name;        public volatile int old;        public User(String name, int old) {            this.name = name;            this.old = old;        }        public String getName() {            return name;        }        public int getOld() {            return old;        }    }}