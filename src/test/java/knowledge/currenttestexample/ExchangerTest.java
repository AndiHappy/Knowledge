package knowledge.currenttestexample;import java.util.concurrent.Exchanger;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class ExchangerTest {  private static final Exchanger<String> exgr = new Exchanger<String>();  private static ExecutorService threadPool = Executors.newFixedThreadPool(2);  public static void main(String[] args) {    new Thread(new Runnable() {      @Override      public void run() {        try {          String C = Thread.currentThread().getName() + " C的数据";          System.out.println("交换之前： " + C);          Thread.sleep(2000);          String value = exgr.exchange(C);          System.out.println("交换之后： " + Thread.currentThread().getName() + " " + value);        } catch (InterruptedException e) {        }      }    }, "第一个线程").start();    new Thread(new Runnable() {      @Override      public void run() {        try {          String A = Thread.currentThread().getName() + " A的数据";          System.out.println("交换之前： " + A);          Thread.sleep(2000);          String value = exgr.exchange(A);          System.out.println("交换之后： " + Thread.currentThread().getName() + " " + value);          System.out.println("再次的交换。");          value = exgr.exchange(value);          System.out.println("交换之后： " + Thread.currentThread().getName() + " " + value);        } catch (InterruptedException e) {        }      }    }, "第二个线程").start();    new Thread(new Runnable() {      @Override      public void run() {        try {          String B = Thread.currentThread().getName() + " B的数据";          System.out.println("交换之前： " + B);          String value = exgr.exchange(B);          System.out.println("交换之后： " + Thread.currentThread().getName() + " " + value);        } catch (InterruptedException e) {        }      }    }, "第三个线程").start();    threadPool.shutdown();  }}